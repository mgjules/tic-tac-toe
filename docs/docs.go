// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "Jules Michael",
            "email": "julesmichaelgiovanni@gmail.com"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/": {
            "get": {
                "description": "get a \"pong\" with current time",
                "produces": [
                    "application/json"
                ],
                "summary": "Health checks the service",
                "responses": {
                    "200": {
                        "description": "pong",
                        "schema": {
                            "$ref": "#/definitions/http.HealthCheckResponse"
                        }
                    }
                }
            }
        },
        "/move": {
            "post": {
                "description": "Moves a mark('x', 'o') on the tictactoe board",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Makes a move",
                "parameters": [
                    {
                        "description": "represents a move request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.MoveRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "move successful / X won / O won / tie",
                        "schema": {
                            "$ref": "#/definitions/http.MoveResponse"
                        }
                    },
                    "400": {
                        "description": "validation failed on request",
                        "schema": {
                            "$ref": "#/definitions/http.MoveResponse"
                        }
                    },
                    "403": {
                        "description": "please wait your turn / forbidden move",
                        "schema": {
                            "$ref": "#/definitions/http.MoveResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "game.Game": {
            "type": "object",
            "properties": {
                "board_cells": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "example": [
                        0,
                        1,
                        0,
                        2,
                        2,
                        0,
                        1,
                        1,
                        0
                    ]
                },
                "id": {
                    "type": "string",
                    "example": "123123"
                },
                "last_move_by": {
                    "type": "integer",
                    "enum": [
                        1,
                        2
                    ],
                    "example": 1
                }
            }
        },
        "http.HealthCheckResponse": {
            "type": "object",
            "properties": {
                "pong": {
                    "type": "string",
                    "example": "2020-10-17T11:34:10.089762941+04:00"
                }
            }
        },
        "http.MoveRequest": {
            "type": "object",
            "required": [
                "game_id"
            ],
            "properties": {
                "game_id": {
                    "type": "string",
                    "example": "123123"
                },
                "mark": {
                    "description": "mark 'X' = 1. mark 'O' = 2.",
                    "type": "integer",
                    "enum": [
                        1,
                        2
                    ],
                    "example": 1
                },
                "position": {
                    "type": "integer",
                    "maximum": 8,
                    "minimum": 0,
                    "example": 5
                }
            }
        },
        "http.MoveResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "result": {
                    "type": "string"
                },
                "state": {
                    "$ref": "#/definitions/game.Game"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "localhost:3001",
	BasePath:    "/",
	Schemes:     []string{},
	Title:       "TicTacToe",
	Description: "Microservice for TicTacToe",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
